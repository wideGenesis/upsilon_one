<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>3D Donut Shading</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (Python Edition)</p>
<p class="heading1">3D Donut Shading</p>
<hr class="separator">
<div class="content">
<img src="images/threeddonutshading0.png">&nbsp;&nbsp;<img src="images/threeddonutshading1.png">&nbsp;&nbsp;<img src="images/threeddonutshading2.png">&nbsp;&nbsp;<img src="images/threeddonutshading3.png">&nbsp;&nbsp;<img src="images/threeddonutshading4.png">&nbsp;&nbsp;<img src="images/threeddonutshading5.png">&nbsp;&nbsp;<img src="images/threeddonutshading6.png">&nbsp;&nbsp;<img src="images/threeddonutshading7.png">
<br><br>
This example demonstrates various sector shading effects applicable to 3D donut charts.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> pythondemo\threeddonutshading.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *

def createChart(chartIndex) :

    # The data for the pie chart
    data = [18, 30, 20, 15]

    # The colors to use for the sectors
    colors = [0x66aaee, 0xeebb22, 0xbbbbbb, 0x8844ff]

    # Create a PieChart object of size 200 x 200 pixels. Use a vertical gradient color from blue
    # (0000cc) to deep blue (000044) as background. Use rounded corners of 16 pixels radius.
    c = PieChart(200, 200)
    c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight(), 0x0000cc, 0x000044))
    c.setRoundedFrame(0xffffff, 16)

    # Set donut center at (100, 100), and outer/inner radii as 80/40 pixels
    c.setDonutSize(100, 100, 80, 40)

    # Set the pie data
    c.setData(data)

    # Set the sector colors
    c.setColors2(DataColor, colors)

    # Draw the pie in 3D with a pie thickness of 20 pixels
    c.set3D(20)

    # Demonstrates various shading modes
    if chartIndex == 0 :
        c.addTitle("Default Shading", "bold", 12, 0xffffff)
    elif chartIndex == 1 :
        c.addTitle("Flat Gradient", "bold", 12, 0xffffff)
        c.setSectorStyle(FlatShading)
    elif chartIndex == 2 :
        c.addTitle("Local Gradient", "bold", 12, 0xffffff)
        c.setSectorStyle(LocalGradientShading)
    elif chartIndex == 3 :
        c.addTitle("Global Gradient", "bold", 12, 0xffffff)
        c.setSectorStyle(GlobalGradientShading)
    elif chartIndex == 4 :
        c.addTitle("Concave Shading", "bold", 12, 0xffffff)
        c.setSectorStyle(ConcaveShading)
    elif chartIndex == 5 :
        c.addTitle("Rounded Edge", "bold", 12, 0xffffff)
        c.setSectorStyle(RoundedEdgeShading)
    elif chartIndex == 6 :
        c.addTitle("Radial Gradient", "bold", 12, 0xffffff)
        c.setSectorStyle(RadialShading)
    elif chartIndex == 7 :
        c.addTitle("Ring Shading", "bold", 12, 0xffffff)
        c.setSectorStyle(RingShading)

    # Disable the sector labels by setting the color to Transparent
    c.setLabelStyle("", 8, Transparent)

    # Output the chart
    c.makeChart("threeddonutshading%s.png" % chartIndex)


createChart(0)
createChart(1)
createChart(2)
createChart(3)
createChart(4)
createChart(5)
createChart(6)
createChart(7)</pre></td></tr></table><br><b>[CGI Version]</b> pythondemo_cgi\threeddonutshading.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import cgi, sys

# Get HTTP query parameters
query = cgi.FieldStorage()

# This script can draw different charts depending on the chartIndex
chartIndex = int(query["img"].value)

# The data for the pie chart
data = [18, 30, 20, 15]

# The colors to use for the sectors
colors = [0x66aaee, 0xeebb22, 0xbbbbbb, 0x8844ff]

# Create a PieChart object of size 200 x 200 pixels. Use a vertical gradient color from blue
# (0000cc) to deep blue (000044) as background. Use rounded corners of 16 pixels radius.
c = PieChart(200, 200)
c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight(), 0x0000cc, 0x000044))
c.setRoundedFrame(0xffffff, 16)

# Set donut center at (100, 100), and outer/inner radii as 80/40 pixels
c.setDonutSize(100, 100, 80, 40)

# Set the pie data
c.setData(data)

# Set the sector colors
c.setColors2(DataColor, colors)

# Draw the pie in 3D with a pie thickness of 20 pixels
c.set3D(20)

# Demonstrates various shading modes
if chartIndex == 0 :
    c.addTitle("Default Shading", "bold", 12, 0xffffff)
elif chartIndex == 1 :
    c.addTitle("Flat Gradient", "bold", 12, 0xffffff)
    c.setSectorStyle(FlatShading)
elif chartIndex == 2 :
    c.addTitle("Local Gradient", "bold", 12, 0xffffff)
    c.setSectorStyle(LocalGradientShading)
elif chartIndex == 3 :
    c.addTitle("Global Gradient", "bold", 12, 0xffffff)
    c.setSectorStyle(GlobalGradientShading)
elif chartIndex == 4 :
    c.addTitle("Concave Shading", "bold", 12, 0xffffff)
    c.setSectorStyle(ConcaveShading)
elif chartIndex == 5 :
    c.addTitle("Rounded Edge", "bold", 12, 0xffffff)
    c.setSectorStyle(RoundedEdgeShading)
elif chartIndex == 6 :
    c.addTitle("Radial Gradient", "bold", 12, 0xffffff)
    c.setSectorStyle(RadialShading)
elif chartIndex == 7 :
    c.addTitle("Ring Shading", "bold", 12, 0xffffff)
    c.setSectorStyle(RingShading)

# Disable the sector labels by setting the color to Transparent
c.setLabelStyle("", 8, Transparent)

# Output the chart
print("Content-type: image/png\n")
binaryPrint(c.makeChart2(PNG))</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
