<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>XY Zooming and Scrolling</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">
<p class="heading0">ChartDirector 6.0 (Python Edition)</p>
<p class="heading1">XY Zooming and Scrolling</p>
<hr class="separator">
<div class="content"><img src="images/xyzoomscroll_web.png"><br><br>
This example demonstrates zooming and scrolling in both horizontal and vertical directions. In addition to using mouse click and drag, this example demonstrates using a <a href="WebViewPortControl.htm">WebViewPortControl</a> to visualize and control the viewport. There is also an image map for data point tooltips.<br><br>
The main source code listing of this sample program is included at the end of this section. The code consists of the following main parts:<br><br>
<ul>
<li><b>initViewer</b>: This function is for initializing the <a href="WebChartViewer.htm">WebChartViewer</a> during initial page request. In this example, we just use default values, so there is nothing to initialize.<br><br>
<li><b>drawChart</b>: This is the main charting code. It plots the chart as usual, with the x-axis and y-axis configured to synchronize with the view port using <a href="WebChartViewer.syncDateAxisWithViewPort.htm">WebChartViewer.syncDateAxisWithViewPort</a>.<br><br>
<li><b>drawFullChart</b>: This function draws an overall chart that covers the full data range for display in the <a href="WebViewPortControl.htm">WebViewPortControl</a>.<br><br>
<li><b>window onload event handler</b>: The event handler, set up using <a href="JsChartViewer.addEventListener.htm">JsChartViewer.addEventListener</a>, is used to initialize the browser side user interface. It configures the <a href="JsChartViewer.ViewPortChanged.htm">JsChartViewer.ViewPortChanged</a> event to trigger an AJAX chart update. The mouse usage is initialized to <a href="JsChartViewer.ZoomIn.htm">JsChartViewer.ZoomIn</a>. Finally, it connects the <a href="JsViewPortControl.htm">JsViewPortControl</a> with the <a href="JsChartViewer.htm">JsChartViewer</a>, so that the JsViewPortControl can be used to visualize and control the viewport of the JsChartViewer.<br><br>
<li><b>setMouseUsage</b>: This function is called by the onclick event handler of the Pointer, Zoom In and Zoom Out push buttons to set the mouse usage mode.<br></ul>
When the script starts to run , the first thing it does is to use <a href="WebChartViewer.isPartialUpdateRequest.htm">WebChartViewer.isPartialUpdateRequest</a> to detect if it is handling an AJAX chart update or an initial page request. If it is an AJAX chart update, it just draws the chart and sends back an AJAX response using <a href="WebChartViewer.partialUpdateChart.htm">WebChartViewer.partialUpdateChart</a>, then terminates the request. If it is an initial page request, it initializes the <a href="WebChartViewer.htm">WebChartViewer</a>, draws the chart, and sends the HTML contents to the browser as usual.
</div><p class="heading1a">Files in this Demonstration</p><div class="content">
This sample script requires the following files. When developing your own script using this sample script as a template, please ensure you copy the necessary files to the proper directories  and reference them using proper paths.<br><br>
<table width="98%" border="1" cellpadding="5" cellspacing="0"> <tr><th width="24%">File<th width="74%">Description
<tr><td>xyzoomscroll.py<td>Main source code for this demo.
<tr><td>scrollnesw.gif<br>zoomInIcon.gif<br>zoomOutIcon.gif<td>The images used in the push buttons in this demo.
<tr><td>getchart.py<td>The standard utility script used in the image url for retrieving the chart image from a temporary file (see <a href="BaseChart.makeTmpFile.htm">BaseChart.makeTmpFile</a>).
<tr><td>cdjcv.js<br>zoomin.cur<br>zoomout.cur<br>wait.gif<br>spacer.gif<td>The script file for <a href="JsChartViewer.htm">JsChartViewer</a> and <a href="JsViewPortControl.htm">JsViewPortControl</a>, and the supporting cursor and image files. They must be in the same directory.
<tr><td>loadresource.py<td>A utility script for loading non-CGI files from the CGI directory.<br><br>
For convenience of distribution, in this demonstration, all files, including Javascript, GIF and CUR files, are put in the same directory as the CGI script, and "loadresource.py" is used to load them. This is less efficient. In your own script, it is recommended that you put the Javascript, GIF and CUR files in a web document directory, so that "loadresource.py" is not needed.
</table></div><p class="heading1a">Source Code Listing</p><div class="content">
<b>[CGI Version]</b> pythondemo_cgi\xyzoomscroll.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import cgi, sys

# Get HTTP query parameters
query = cgi.FieldStorage()


#
# In this demo, the generated web page needs to load the "cdjcv.js" Javascript file and several GIF
# files. For ease of installation, we put these files in the same directory as this script. However,
# if this script is installed in a CGI only directory (such as cgi-bin), the web server would not
# allow the browser to access these non-CGI files.
#
# To get around this potential issue, a special load resource script is used to load these files.
# Instead of using:
#
#    &lt;SCRIPT SRC="cdjcv.js"&gt;
#
# we now use:
#
#    &lt;SCRIPT SRC="loadresource.py?file=cdjcv.js"&gt;
#
# Similar methods are used to load the GIF files.
#
# If this script is not in a CGI only directory, you may replace the following loadResource string
# with an empty string "" to improve performance.
#
loadResource = "loadresource.py?file="

#
# Initialize the WebChartViewer when the page is first loaded
#
def initViewer(viewer) :
    #
    # This example assumes the initial chart is the full chart and we can auto-detect the full data
    # range in the drawChart code. So we do not need to configure the full range here.
    #
    pass

#
# Draw the main chart
#
def drawChart(viewer) :
    #
    # For simplicity, in this demo, the data arrays are filled with hard coded data. In a real
    # application, you may use a database or other data source to load up the arrays, and only
    # visible data (data within the view port) need to be loaded.
    #
    dataX0 = [10, 15, 6, -12, 14, -8, 13, -3, 16, 12, 10.5, -7, 3, -10, -5, 2, 5]
    dataY0 = [130, 150, 80, 110, -110, -105, -130, -15, -170, 125, 125, 60, 25, 150, 150, 15, 120]
    dataX1 = [6, 7, -4, 3.5, 7, 8, -9, -10, -12, 11, 8, -3, -2, 8, 4, -15, 15]
    dataY1 = [65, -40, -40, 45, -70, -80, 80, 10, -100, 105, 60, 50, 20, 170, -25, 50, 75]
    dataX2 = [-10, -12, 11, 8, 6, 12, -4, 3.5, 7, 8, -9, 3, -13, 16, -7.5, -10, -15]
    dataY2 = [65, -80, -40, 45, -70, -80, 80, 90, -100, 105, 60, -75, -150, -40, 120, -50, -30]

    # Create an XYChart object 500 x 480 pixels in size, with light blue (c0c0ff) background
    c = XYChart(500, 480, 0xc0c0ff)

    # Set the plotarea at (50, 40) and of size 400 x 400 pixels. Use light grey (c0c0c0) horizontal
    # and vertical grid lines. Set 4 quadrant coloring, where the colors alternate between lighter
    # and deeper grey (dddddd/eeeeee).
    c.setPlotArea(50, 40, 400, 400, -1, -1, -1, 0xc0c0c0, 0xc0c0c0).set4QBgColor(0xdddddd, 0xeeeeee,
        0xdddddd, 0xeeeeee, 0x000000)

    # As the data can lie outside the plotarea in a zoomed chart, we need enable clipping
    c.setClipping()

    # Set 4 quadrant mode, with both x and y axes symetrical around the origin
    c.setAxisAtOrigin(XYAxisAtOrigin, XAxisSymmetric + YAxisSymmetric)

    # Add a legend box at (450, 40) (top right corner of the chart) with vertical layout and 8pt
    # Arial Bold font. Set the background color to semi-transparent grey (40dddddd).
    legendBox = c.addLegend(450, 40, 1, "arialbd.ttf", 8)
    legendBox.setAlignment(TopRight)
    legendBox.setBackground(0x40dddddd)

    # Add titles to axes
    c.xAxis().setTitle("Alpha Index")
    c.yAxis().setTitle("Beta Index")

    # Set axes line width to 2 pixels
    c.xAxis().setWidth(2)
    c.yAxis().setWidth(2)

    # The default ChartDirector settings has a denser y-axis grid spacing and less-dense x-axis grid
    # spacing. In this demo, we want the tick spacing to be symmetrical. We use around 40 pixels
    # between major ticks and 20 pixels between minor ticks.
    c.xAxis().setTickDensity(40, 20)
    c.yAxis().setTickDensity(40, 20)

    #
    # In this example, we represent the data by scatter points. You may modify the code below to use
    # other layer types (lines, areas, etc).
    #

    # Add scatter layer, using 11 pixels red (ff33333) X shape symbols
    c.addScatterLayer(dataX0, dataY0, "Group A", Cross2Shape(), 11, 0xff3333)

    # Add scatter layer, using 11 pixels green (33ff33) circle symbols
    c.addScatterLayer(dataX1, dataY1, "Group B", CircleShape, 11, 0x33ff33)

    # Add scatter layer, using 11 pixels blue (3333ff) triangle symbols
    c.addScatterLayer(dataX2, dataY2, "Group C", TriangleSymbol, 11, 0x3333ff)

    #
    # In this example, we have not explicitly configured the full x and y range. In this case, the
    # first time syncLinearAxisWithViewPort is called, ChartDirector will auto-scale the axis and
    # assume the resulting range is the full range. In subsequent calls, ChartDirector will set the
    # axis range based on the view port and the full range.
    #
    viewer.syncLinearAxisWithViewPort("x", c.xAxis())
    viewer.syncLinearAxisWithViewPort("y", c.yAxis())

    # Output the chart
    chartQuery = c.makeTmpFile("/tmp/tmpcharts")

    # Include tool tip for the chart
    imageMap = c.getHTMLImageMap("", "", "title='[{dataSetName}] Alpha = {x|G}, Beta = {value|G}'")

    # Set the chart URL, image map and chart metrics to the viewer
    viewer.setImageUrl("getchart.py?img=/tmp/tmpcharts/" + chartQuery)
    viewer.setImageMap(imageMap)
    viewer.setChartMetrics(c.getChartMetrics())

#
# Draw the thumbnail chart in the WebViewPortControl
#
def drawFullChart(vp, viewer) :
    #
    # For simplicity, in this demo, the data arrays are filled with hard coded data. In a real
    # application, you may use a database or other data source to load up the arrays. As this is a
    # small thumbnail chart, complete data may not be needed. For exmaple, if there are a million
    # points, a random sample may already be sufficient for the thumbnail chart.
    #
    dataX0 = [10, 15, 6, -12, 14, -8, 13, -3, 16, 12, 10.5, -7, 3, -10, -5, 2, 5]
    dataY0 = [130, 150, 80, 110, -110, -105, -130, -15, -170, 125, 125, 60, 25, 150, 150, 15, 120]
    dataX1 = [6, 7, -4, 3.5, 7, 8, -9, -10, -12, 11, 8, -3, -2, 8, 4, -15, 15]
    dataY1 = [65, -40, -40, 45, -70, -80, 80, 10, -100, 105, 60, 50, 20, 170, -25, 50, 75]
    dataX2 = [-10, -12, 11, 8, 6, 12, -4, 3.5, 7, 8, -9, 3, -13, 16, -7.5, -10, -15]
    dataY2 = [65, -80, -40, 45, -70, -80, 80, 90, -100, 105, 60, -75, -150, -40, 120, -50, -30]

    # Create an XYChart object 120 x 120 pixels in size
    c = XYChart(120, 120)

    # Set the plotarea to cover the entire chart and with no grid lines. Set 4 quadrant coloring,
    # where the colors alternate between lighter and deeper grey (d8d8d8/eeeeee).
    c.setPlotArea(0, 0, c.getWidth() - 1, c.getHeight() - 1, -1, -1, -1, Transparent).set4QBgColor(
        0xd8d8d8, 0xeeeeee, 0xd8d8d8, 0xeeeeee, 0x000000)

    # Set 4 quadrant mode, with both x and y axes symetrical around the origin
    c.setAxisAtOrigin(XYAxisAtOrigin, XAxisSymmetric + YAxisSymmetric)

    # The x and y axis scales reflect the full range of the view port
    c.xAxis().setLinearScale(viewer.getValueAtViewPort("x", 0), viewer.getValueAtViewPort("x", 1),
        NoValue)
    c.yAxis().setLinearScale(viewer.getValueAtViewPort("y", 0), viewer.getValueAtViewPort("y", 1),
        NoValue)

    # Add scatter layer, using 5 pixels red (ff33333) X shape symbols
    c.addScatterLayer(dataX0, dataY0, "Group A", Cross2Shape(), 5, 0xff3333)

    # Add scatter layer, using 5 pixels green (33ff33) circle symbols
    c.addScatterLayer(dataX1, dataY1, "Group B", CircleShape, 5, 0x33ff33)

    # Add scatter layer, using 5 pixels blue (3333ff) triangle symbols
    c.addScatterLayer(dataX2, dataY2, "Group C", TriangleSymbol, 5, 0x3333ff)

    # Output the chart
    chartQuery = c.makeTmpFile("/tmp/tmpcharts")

    # Set the chart URL and chart metrics to the viewport control
    vp.setImageUrl("getchart.py?img=/tmp/tmpcharts/" + chartQuery)
    vp.setChartMetrics(c.getChartMetrics())

#
# This script handles both the full page request, as well as the subsequent partial updates (AJAX
# chart updates). We need to determine the type of request first before we processing it.
#

# Create the WebChartViewer object
viewer = WebChartViewer(query, "chart1")

if viewer.isPartialUpdateRequest() :
    # Is a partial update request. Draw the chart and perform a partial response.
    drawChart(viewer)
    binaryPrint(viewer.partialUpdateChart())
    sys.exit()

#
# If the code reaches here, it is a full page request.
#

# Initialize the WebChartViewer and draw the chart.
initViewer(viewer)
drawChart(viewer)

# Draw a thumbnail chart representing the full range in the WebViewPortControl
viewPortCtrl = WebViewPortControl("fullchart1")
drawFullChart(viewPortCtrl, viewer)

print("Content-type: text/html\n")
print("""
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;XY Zooming and Scrolling&lt;/title&gt;
    &lt;script type="text/javascript" src="%(loadResource)scdjcv.js"&gt;&lt;/script&gt;
    &lt;style type="text/css"&gt;
        .chartButton { font:12px Verdana; border-bottom:#000000 1px solid; padding:5px; cursor:pointer;}
        .chartButtonSpacer { font:12px Verdana; border-bottom:#000000 1px solid; padding:5px;}
        .chartButton:hover { box-shadow:inset 0px 0px 0px 2px #444488; }
        .chartButtonPressed { background-color: #CCFFCC; }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body style="margin:0px"&gt;
&lt;script type="text/javascript"&gt;

//
// Execute the following initialization code after the web page is loaded
//
JsChartViewer.addEventListener(window, 'load', function() {
    // Update the chart when the view port has changed (eg. when the user zooms in using the mouse)
    var viewer = JsChartViewer.get('%(id)s');
    viewer.attachHandler("ViewPortChanged", viewer.partialUpdate);

    // Set the zoom and scroll mode to bi-directional
    viewer.setScrollDirection(JsChartViewer.HorizontalVertical);
    viewer.setZoomDirection(JsChartViewer.HorizontalVertical);

    // Set the initial mouse usage to "zoom in"
    setMouseMode(JsChartViewer.ZoomIn);

    // Initialize the view port control
    var viewPortCtrl = JsViewPortControl.get('%(viewPortCtrl.getId())s');
    // Set the mask color to semi-transparent black
    viewPortCtrl.setViewPortExternalColor("#80000000");
    // Set the selection rectangle border to white
    viewPortCtrl.setSelectionBorderStyle("1px solid white");
    // Bind the view port control to the chart viewer
    viewPortCtrl.setViewer(viewer);
});

//
// This method is called when the user clicks on the Pointer, Zoom In or Zoom Out buttons
//
function setMouseMode(mode)
{
    var viewer = JsChartViewer.get('%(id)s');
    if (mode == viewer.getMouseUsage())
        mode = JsChartViewer.Default;

    // Set the button color based on the selected mouse mode
    document.getElementById("scrollButton").className = "chartButton" +
        ((mode  == JsChartViewer.Scroll) ? " chartButtonPressed" : "");
    document.getElementById("zoomInButton").className = "chartButton" +
        ((mode  == JsChartViewer.ZoomIn) ? " chartButtonPressed" : "");
    document.getElementById("zoomOutButton").className = "chartButton" +
        ((mode  == JsChartViewer.ZoomOut) ? " chartButtonPressed" : "");

    // Set the mouse mode
    viewer.setMouseUsage(mode);
}

&lt;/script&gt;
&lt;form method="post"&gt;
&lt;table cellspacing="0" cellpadding="0" style="border:black 1px solid;"&gt;
    &lt;tr&gt;
        &lt;td align="right" colspan="2" style="background:#000088; color:#ffff00; padding:0px 4px 2px 0px;"&gt;
            &lt;a style="color:#FFFF00; font:italic bold 10pt Arial; text-decoration:none" href="http://www.advsofteng.com/"&gt;
                Advanced Software Engineering
            &lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr valign="top"&gt;
        &lt;td style="width:130px; background:#e0e0e0;"&gt;
            &lt;!-- The following table is to create 3 cells for 3 buttons to control the mouse usage mode. --&gt;
            &lt;table cellspacing="0" cellpadding="0" width="100%%" border="0"&gt;
                &lt;tr&gt;
                    &lt;td class="chartButton" id="scrollButton" onclick="setMouseMode(JsChartViewer.Scroll)"
                        ontouchstart="this.onclick(event); event.preventDefault();"&gt;
                        &lt;img src="%(loadResource)sscrollnesw.gif" style="vertical-align:middle" alt="Drag" /&gt;&amp;nbsp;&amp;nbsp;Drag to Scroll
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td class="chartButton" id="zoomInButton" onclick="setMouseMode(JsChartViewer.ZoomIn)"
                        ontouchstart="this.onclick(event); event.preventDefault();"&gt;
                        &lt;img src="%(loadResource)szoomInIcon.gif" style="vertical-align:middle" alt="Zoom In" /&gt;&amp;nbsp;&amp;nbsp;Zoom In
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td class="chartButton" id="zoomOutButton" onclick="setMouseMode(JsChartViewer.ZoomOut)"
                        ontouchstart="this.onclick(event); event.preventDefault();"&gt;
                        &lt;img src="%(loadResource)szoomOutIcon.gif" style="vertical-align:middle" alt="Zoom Out" /&gt;&amp;nbsp;&amp;nbsp;Zoom Out
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
            &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
            &lt;div style="text-align:center;"&gt;
                &lt;!-- ****** Here is the view port control ****** --&gt;
                %(viewPortCtrl.renderHTML())s
            &lt;/div&gt;
        &lt;/td&gt;
        &lt;td style="border-left: black 1px solid; background-color: #c0c0ff; padding:5px"&gt;
            &lt;!-- ****** Here is the chart image ****** --&gt;
            %(chartImg)s
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
""" % {
    "loadResource" : loadResource,
    "id" : viewer.getId(),
    "viewPortCtrl.getId()" : viewPortCtrl.getId(),
    "viewPortCtrl.renderHTML()" : viewPortCtrl.renderHTML(),
    "chartImg" : viewer.renderHTML()
    })</pre></td></tr></table></div><br>
<hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div></body>
</HTML>
