<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>Color Horizontal Bar Meters</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (Python Edition)</p>
<p class="heading1">Color Horizontal Bar Meters</p>
<hr class="separator">
<div class="content">
<img src="images/colorhbarmeter0.png">&nbsp;&nbsp;<img src="images/colorhbarmeter1.png">&nbsp;&nbsp;<img src="images/colorhbarmeter2.png">&nbsp;&nbsp;<img src="images/colorhbarmeter3.png">&nbsp;&nbsp;<img src="images/colorhbarmeter4.png">&nbsp;&nbsp;<img src="images/colorhbarmeter5.png">
<br><br>
This example demonstrates horizontal bar meters in various colors, with different color scales, and with title and value readout.<br><br>
<a href="BaseMeter.addColorScale.htm">BaseMeter.addColorScale</a> is used to create the color scales in the meters. The color scales are created by with different colors, different end point positions and different widths at the end points.<br><br>
The title and value readout are created using <a href="BaseChart.addText.htm">BaseChart.addText</a>. The value readout is configured to have a black background and a depressed border using <a href="Box.setBackground.htm">Box.setBackground</a>, and with rounded corners using <a href="Box.setRoundedCorners.htm">Box.setRoundedCorners</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> pythondemo\colorhbarmeter.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *

def createChart(chartIndex) :

    # The value to display on the meter
    value = 75.35

    # The background, border and bar colors of the meters
    bgColor = [0xbbddff, 0xccffcc, 0xffddff, 0xffffaa, 0xffdddd, 0xeeeeee]
    borderColor = [0x000088, 0x006600, 0x880088, 0xee6600, 0x880000, 0x666666]
    barColor = [0x0088ff, 0x00cc00, 0x8833dd, 0xff8800, 0xee3333, 0x888888]

    # Create a LinearMeter object of size 260 x 80 pixels with a 3-pixel thick rounded frame
    m = LinearMeter(260, 80, bgColor[chartIndex], borderColor[chartIndex])
    m.setRoundedFrame(Transparent)
    m.setThickFrame(3)

    # Set the scale region top-left corner at (18, 24), with size of 222 x 20 pixels. The scale
    # labels are located on the top (implies horizontal meter)
    m.setMeter(18, 24, 222, 20, Top)

    # Set meter scale from 0 - 100, with a tick every 10 units
    m.setScale(0, 100, 10)

    if chartIndex % 4 == 0 :
        # Add a 5-pixel thick smooth color scale at y = 48 (below the meter scale)
        smoothColorScale = [0, 0x0000ff, 25, 0x0088ff, 50, 0x00ff00, 75, 0xdddd00, 100, 0xff0000]
        m.addColorScale(smoothColorScale, 48, 5)
    elif chartIndex % 4 == 1 :
        # Add a 5-pixel thick step color scale at y = 48 (below the meter scale)
        stepColorScale = [0, 0x00cc00, 50, 0xffdd00, 80, 0xff3333, 100]
        m.addColorScale(stepColorScale, 48, 5)
    elif chartIndex % 4 == 2 :
        # Add a 5-pixel thick high/low color scale at y = 48 (below the meter scale)
        highLowColorScale = [0, 0x0000ff, 40, Transparent, 60, Transparent, 100, 0xff0000]
        m.addColorScale(highLowColorScale, 48, 5)
    else :
        # Add a 5-pixel thick high only color scale at y = 48 (below the meter scale)
        highColorScale = [70, Transparent, 100, 0xff0000]
        m.addColorScale(highColorScale, 48, 0, 48, 8)

    # Add a bar from 0 to value with glass effect and 4 pixel rounded corners
    m.addBar(0, value, barColor[chartIndex], glassEffect(NormalGlare, Top), 4)

    # Add a label right aligned to (243, 65) using 8pt Arial Bold font
    m.addText(243, 65, "Temperature C", "arialbd.ttf", 8, TextColor, Right)

    # Add a text box left aligned to (18, 65). Display the value using white (0xffffff) 8pt Arial
    # Bold font on a black (0x000000) background with depressed rounded border.
    t = m.addText(18, 65, m.formatValue(value, "2"), "arial.ttf", 8, 0xffffff, Left)
    t.setBackground(0x000000, 0x000000, -1)
    t.setRoundedCorners(3)

    # Output the chart
    m.makeChart("colorhbarmeter%s.png" % chartIndex)


createChart(0)
createChart(1)
createChart(2)
createChart(3)
createChart(4)
createChart(5)</pre></td></tr></table><br><b>[CGI Version]</b> pythondemo_cgi\colorhbarmeter.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import cgi, sys

# Get HTTP query parameters
query = cgi.FieldStorage()

# This script can draw different charts depending on the chartIndex
chartIndex = int(query["img"].value)

# The value to display on the meter
value = 75.35

# The background, border and bar colors of the meters
bgColor = [0xbbddff, 0xccffcc, 0xffddff, 0xffffaa, 0xffdddd, 0xeeeeee]
borderColor = [0x000088, 0x006600, 0x880088, 0xee6600, 0x880000, 0x666666]
barColor = [0x0088ff, 0x00cc00, 0x8833dd, 0xff8800, 0xee3333, 0x888888]

# Create a LinearMeter object of size 260 x 80 pixels with a 3-pixel thick rounded frame
m = LinearMeter(260, 80, bgColor[chartIndex], borderColor[chartIndex])
m.setRoundedFrame(Transparent)
m.setThickFrame(3)

# Set the scale region top-left corner at (18, 24), with size of 222 x 20 pixels. The scale labels
# are located on the top (implies horizontal meter)
m.setMeter(18, 24, 222, 20, Top)

# Set meter scale from 0 - 100, with a tick every 10 units
m.setScale(0, 100, 10)

if chartIndex % 4 == 0 :
    # Add a 5-pixel thick smooth color scale at y = 48 (below the meter scale)
    smoothColorScale = [0, 0x0000ff, 25, 0x0088ff, 50, 0x00ff00, 75, 0xdddd00, 100, 0xff0000]
    m.addColorScale(smoothColorScale, 48, 5)
elif chartIndex % 4 == 1 :
    # Add a 5-pixel thick step color scale at y = 48 (below the meter scale)
    stepColorScale = [0, 0x00cc00, 50, 0xffdd00, 80, 0xff3333, 100]
    m.addColorScale(stepColorScale, 48, 5)
elif chartIndex % 4 == 2 :
    # Add a 5-pixel thick high/low color scale at y = 48 (below the meter scale)
    highLowColorScale = [0, 0x0000ff, 40, Transparent, 60, Transparent, 100, 0xff0000]
    m.addColorScale(highLowColorScale, 48, 5)
else :
    # Add a 5-pixel thick high only color scale at y = 48 (below the meter scale)
    highColorScale = [70, Transparent, 100, 0xff0000]
    m.addColorScale(highColorScale, 48, 0, 48, 8)

# Add a bar from 0 to value with glass effect and 4 pixel rounded corners
m.addBar(0, value, barColor[chartIndex], glassEffect(NormalGlare, Top), 4)

# Add a label right aligned to (243, 65) using 8pt Arial Bold font
m.addText(243, 65, "Temperature C", "arialbd.ttf", 8, TextColor, Right)

# Add a text box left aligned to (18, 65). Display the value using white (0xffffff) 8pt Arial Bold
# font on a black (0x000000) background with depressed rounded border.
t = m.addText(18, 65, m.formatValue(value, "2"), "arial.ttf", 8, 0xffffff, Left)
t.setBackground(0x000000, 0x000000, -1)
t.setRoundedCorners(3)

# Output the chart
print("Content-type: image/png\n")
binaryPrint(m.makeChart2(PNG))</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
