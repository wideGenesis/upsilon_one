<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>Donut Width</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (Python Edition)</p>
<p class="heading1">Donut Width</p>
<hr class="separator">
<div class="content">
<img src="images/donutwidth0.png">&nbsp;&nbsp;<img src="images/donutwidth1.png">&nbsp;&nbsp;<img src="images/donutwidth2.png">&nbsp;&nbsp;<img src="images/donutwidth3.png">&nbsp;&nbsp;<img src="images/donutwidth4.png">
<br><br>
This example demonstrates the effects of different donut widths.<br><br>
Donut widths are configured by using different inner and outer radii when calling <a href="PieChart.setDonutSize.htm">PieChart.setDonutSize</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> pythondemo\donutwidth.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *

def createChart(chartIndex) :

    # Determine the donut inner radius (as percentage of outer radius) based on input parameter
    donutRadius = chartIndex * 25

    # The data for the pie chart
    data = [10, 10, 10, 10, 10]

    # The labels for the pie chart
    labels = ["Marble", "Wood", "Granite", "Plastic", "Metal"]

    # Create a PieChart object of size 150 x 120 pixels, with a grey (EEEEEE) background, black
    # border and 1 pixel 3D border effect
    c = PieChart(150, 120, 0xeeeeee, 0x000000, 1)

    # Set donut center at (75, 65) and the outer radius to 50 pixels. Inner radius is computed
    # according donutWidth
    c.setDonutSize(75, 60, 50, int(50 * donutRadius / 100))

    # Add a title to show the donut width
    c.addTitle("Inner Radius = %s %%" % (donutRadius), "arial.ttf", 10).setBackground(0xcccccc, 0)

    # Draw the pie in 3D
    c.set3D(12)

    # Set the pie data and the pie labels
    c.setData(data, labels)

    # Disable the sector labels by setting the color to Transparent
    c.setLabelStyle("", 8, Transparent)

    # Output the chart
    c.makeChart("donutwidth%s.png" % chartIndex)


createChart(0)
createChart(1)
createChart(2)
createChart(3)
createChart(4)</pre></td></tr></table><br><b>[CGI Version]</b> pythondemo_cgi\donutwidth.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import cgi, sys

# Get HTTP query parameters
query = cgi.FieldStorage()

# This script can draw different charts depending on the chartIndex
chartIndex = int(query["img"].value)

# Determine the donut inner radius (as percentage of outer radius) based on input parameter
donutRadius = chartIndex * 25

# The data for the pie chart
data = [10, 10, 10, 10, 10]

# The labels for the pie chart
labels = ["Marble", "Wood", "Granite", "Plastic", "Metal"]

# Create a PieChart object of size 150 x 120 pixels, with a grey (EEEEEE) background, black border
# and 1 pixel 3D border effect
c = PieChart(150, 120, 0xeeeeee, 0x000000, 1)

# Set donut center at (75, 65) and the outer radius to 50 pixels. Inner radius is computed according
# donutWidth
c.setDonutSize(75, 60, 50, int(50 * donutRadius / 100))

# Add a title to show the donut width
c.addTitle("Inner Radius = %s %%" % (donutRadius), "arial.ttf", 10).setBackground(0xcccccc, 0)

# Draw the pie in 3D
c.set3D(12)

# Set the pie data and the pie labels
c.setData(data, labels)

# Disable the sector labels by setting the color to Transparent
c.setLabelStyle("", 8, Transparent)

# Output the chart
print("Content-type: image/png\n")
binaryPrint(c.makeChart2(PNG))</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
