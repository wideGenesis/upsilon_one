<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>Y-Axis Scaling</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (Python Edition)</p>
<p class="heading1">Y-Axis Scaling</p>
<hr class="separator">
<div class="content">
<img src="images/axisscale0.png">&nbsp;&nbsp;<img src="images/axisscale1.png">&nbsp;&nbsp;<img src="images/axisscale2.png">&nbsp;&nbsp;<img src="images/axisscale3.png">&nbsp;&nbsp;<img src="images/axisscale4.png">
<br><br>
This example demonstrates how to control auto-scaling.<br><br>
By default, ChartDirector auto-scales all axes. The <a href="Axis.setAutoScale.htm">Axis.setAutoScale</a> method controls the top extension, bottom extension and the zero affinity parameters that ChartDirector uses during auto-scaling. The first two parameters determine the amount of top and bottom margins to reserve during auto-scaling, while the last parameter determines when the axis should start from the origin (0).<br><br>
The first 3 charts demonstrate the effects of different top/bottom extensions.<br><br>
The 4th chart demonstrates that one could exclude a segment on the ends of an axis from scaling using <a href="Axis.setMargin.htm">Axis.setMargin</a>.<br><br>
The 5th chart demonstrates manual scaling instead of auto-scaling. In manual scaling, the axis scale is explicitly provided by using <a href="Axis.setLinearScale.htm">Axis.setLinearScale</a>, <a href="Axis.setLinearScale2.htm">Axis.setLinearScale2</a>, <a href="Axis.setLogScale.htm">Axis.setLogScale</a>, <a href="Axis.setLogScale2.htm">Axis.setLogScale2</a>, <a href="Axis.setDateScale.htm">Axis.setDateScale</a> or <a href="Axis.setDateScale2.htm">Axis.setDateScale2</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> pythondemo\axisscale.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *

def createChart(chartIndex) :

    # The data for the chart
    data = [5.5, 3.5, -3.7, 1.7, -1.4, 3.3]
    labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun"]

    # Create a XYChart object of size 200 x 190 pixels
    c = XYChart(200, 190)

    # Set the plot area at (30, 20) and of size 140 x 140 pixels
    c.setPlotArea(30, 20, 140, 140)

    # Configure the axis as according to the input parameter
    if chartIndex == 0 :
        c.addTitle("No Axis Extension", "arial.ttf", 8)
    elif chartIndex == 1 :
        c.addTitle("Top/Bottom Extensions = 0/0", "arial.ttf", 8)
        # Reserve 20% margin at top of plot area when auto-scaling
        c.yAxis().setAutoScale(0, 0)
    elif chartIndex == 2 :
        c.addTitle("Top/Bottom Extensions = 0.2/0.2", "arial.ttf", 8)
        # Reserve 20% margin at top and bottom of plot area when auto-scaling
        c.yAxis().setAutoScale(0.2, 0.2)
    elif chartIndex == 3 :
        c.addTitle("Axis Top Margin = 15", "arial.ttf", 8)
        # Reserve 15 pixels at top of plot area
        c.yAxis().setMargin(15)
    else :
        c.addTitle("Manual Scale -5 to 10", "arial.ttf", 8)
        # Set the y axis to scale from -5 to 10, with ticks every 5 units
        c.yAxis().setLinearScale(-5, 10, 5)

    # Set the labels on the x axis
    c.xAxis().setLabels(labels)

    # Add a color bar layer using the given data. Use a 1 pixel 3D border for the bars.
    c.addBarLayer3(data).setBorderColor(-1, 1)

    # Output the chart
    c.makeChart("axisscale%s.png" % chartIndex)


createChart(0)
createChart(1)
createChart(2)
createChart(3)
createChart(4)</pre></td></tr></table><br><b>[CGI Version]</b> pythondemo_cgi\axisscale.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import cgi, sys

# Get HTTP query parameters
query = cgi.FieldStorage()

# This script can draw different charts depending on the chartIndex
chartIndex = int(query["img"].value)

# The data for the chart
data = [5.5, 3.5, -3.7, 1.7, -1.4, 3.3]
labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun"]

# Create a XYChart object of size 200 x 190 pixels
c = XYChart(200, 190)

# Set the plot area at (30, 20) and of size 140 x 140 pixels
c.setPlotArea(30, 20, 140, 140)

# Configure the axis as according to the input parameter
if chartIndex == 0 :
    c.addTitle("No Axis Extension", "arial.ttf", 8)
elif chartIndex == 1 :
    c.addTitle("Top/Bottom Extensions = 0/0", "arial.ttf", 8)
    # Reserve 20% margin at top of plot area when auto-scaling
    c.yAxis().setAutoScale(0, 0)
elif chartIndex == 2 :
    c.addTitle("Top/Bottom Extensions = 0.2/0.2", "arial.ttf", 8)
    # Reserve 20% margin at top and bottom of plot area when auto-scaling
    c.yAxis().setAutoScale(0.2, 0.2)
elif chartIndex == 3 :
    c.addTitle("Axis Top Margin = 15", "arial.ttf", 8)
    # Reserve 15 pixels at top of plot area
    c.yAxis().setMargin(15)
else :
    c.addTitle("Manual Scale -5 to 10", "arial.ttf", 8)
    # Set the y axis to scale from -5 to 10, with ticks every 5 units
    c.yAxis().setLinearScale(-5, 10, 5)

# Set the labels on the x axis
c.xAxis().setLabels(labels)

# Add a color bar layer using the given data. Use a 1 pixel 3D border for the bars.
c.addBarLayer3(data).setBorderColor(-1, 1)

# Output the chart
print("Content-type: image/png\n")
binaryPrint(c.makeChart2(PNG))</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
