<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>H-Linear Meter Orientation</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (Python Edition)</p>
<p class="heading1">H-Linear Meter Orientation</p>
<hr class="separator">
<div class="content">
<img src="images/hlinearmeterorientation0.png">&nbsp;&nbsp;<img src="images/hlinearmeterorientation1.png">&nbsp;&nbsp;<img src="images/hlinearmeterorientation2.png">&nbsp;&nbsp;<img src="images/hlinearmeterorientation3.png">
<br><br>
This example demonstrates horizontal linear meters in different orientations.<br><br>
In a horizontal linear meter, the scale labels can be positioned above the meter scale or below it. This is controlled by the last argument to <a href="LinearMeter.setMeter.htm">LinearMeter.setMeter</a>, which can be <a href="pychartdir.Top.htm">Top</a> or <a href="pychartdir.Bottom.htm">Bottom</a>,<br><br>
The title and value readout added using <a href="BaseChart.addText.htm">BaseChart.addText</a> can be put at any position. In this example, we put them at the opposite side to the scale labels.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> pythondemo\hlinearmeterorientation.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *

def createChart(chartIndex) :

    # The value to display on the meter
    value = 74.25

    # Create a LinearMeter object of size 250 x 75 pixels with very light grey (0xeeeeee) backgruond
    # and a light grey (0xccccccc) 3-pixel thick rounded frame
    m = LinearMeter(250, 75, 0xeeeeee, 0xcccccc)
    m.setRoundedFrame(Transparent)
    m.setThickFrame(3)

    # This example demonstrates putting the text labels at the top or bottom. This is by setting the
    # label alignment, scale position and label position.
    alignment = [Top, Top, Bottom, Bottom]
    meterYPos = [23, 23, 34, 34]
    labelYPos = [61, 61, 15, 15]

    # Set the scale region
    m.setMeter(14, meterYPos[chartIndex], 218, 20, alignment[chartIndex])

    # Set meter scale from 0 - 100, with a tick every 10 units
    m.setScale(0, 100, 10)

    # Add a smooth color scale at the default position
    smoothColorScale = [0, 0x6666ff, 25, 0x00bbbb, 50, 0x00ff00, 75, 0xffff00, 100, 0xff0000]
    m.addColorScale(smoothColorScale)

    # Add a blue (0x0000cc) pointer at the specified value
    m.addPointer(value, 0x0000cc)

    #
    # In this example, some charts have the "Temperauture" label on the left side and the value
    # readout on the right side, and some charts have the reverse
    #

    if chartIndex % 2 == 0 :
        # Add a label on the left side using 8pt Arial Bold font
        m.addText(10, labelYPos[chartIndex], "Temperature C", "arialbd.ttf", 8, TextColor, Left)

        # Add a text box on the right side. Display the value using white (0xffffff) 8pt Arial Bold
        # font on a black (0x000000) background with depressed rounded border.
        t = m.addText(235, labelYPos[chartIndex], m.formatValue(value, "2"), "arialbd.ttf", 8,
            0xffffff, Right)
        t.setBackground(0x000000, 0x000000, -1)
        t.setRoundedCorners(3)
    else :
        # Add a label on the right side using 8pt Arial Bold font
        m.addText(237, labelYPos[chartIndex], "Temperature C", "arialbd.ttf", 8, TextColor, Right)

        # Add a text box on the left side. Display the value using white (0xffffff) 8pt Arial Bold
        # font on a black (0x000000) background with depressed rounded border.
        t = m.addText(11, labelYPos[chartIndex], m.formatValue(value, "2"), "arialbd.ttf", 8,
            0xffffff, Left)
        t.setBackground(0x000000, 0x000000, -1)
        t.setRoundedCorners(3)

    # Output the chart
    m.makeChart("hlinearmeterorientation%s.png" % chartIndex)


createChart(0)
createChart(1)
createChart(2)
createChart(3)</pre></td></tr></table><br><b>[CGI Version]</b> pythondemo_cgi\hlinearmeterorientation.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import cgi, sys

# Get HTTP query parameters
query = cgi.FieldStorage()

# This script can draw different charts depending on the chartIndex
chartIndex = int(query["img"].value)

# The value to display on the meter
value = 74.25

# Create a LinearMeter object of size 250 x 75 pixels with very light grey (0xeeeeee) backgruond and
# a light grey (0xccccccc) 3-pixel thick rounded frame
m = LinearMeter(250, 75, 0xeeeeee, 0xcccccc)
m.setRoundedFrame(Transparent)
m.setThickFrame(3)

# This example demonstrates putting the text labels at the top or bottom. This is by setting the
# label alignment, scale position and label position.
alignment = [Top, Top, Bottom, Bottom]
meterYPos = [23, 23, 34, 34]
labelYPos = [61, 61, 15, 15]

# Set the scale region
m.setMeter(14, meterYPos[chartIndex], 218, 20, alignment[chartIndex])

# Set meter scale from 0 - 100, with a tick every 10 units
m.setScale(0, 100, 10)

# Add a smooth color scale at the default position
smoothColorScale = [0, 0x6666ff, 25, 0x00bbbb, 50, 0x00ff00, 75, 0xffff00, 100, 0xff0000]
m.addColorScale(smoothColorScale)

# Add a blue (0x0000cc) pointer at the specified value
m.addPointer(value, 0x0000cc)

#
# In this example, some charts have the "Temperauture" label on the left side and the value readout
# on the right side, and some charts have the reverse
#

if chartIndex % 2 == 0 :
    # Add a label on the left side using 8pt Arial Bold font
    m.addText(10, labelYPos[chartIndex], "Temperature C", "arialbd.ttf", 8, TextColor, Left)

    # Add a text box on the right side. Display the value using white (0xffffff) 8pt Arial Bold font
    # on a black (0x000000) background with depressed rounded border.
    t = m.addText(235, labelYPos[chartIndex], m.formatValue(value, "2"), "arialbd.ttf", 8, 0xffffff,
        Right)
    t.setBackground(0x000000, 0x000000, -1)
    t.setRoundedCorners(3)
else :
    # Add a label on the right side using 8pt Arial Bold font
    m.addText(237, labelYPos[chartIndex], "Temperature C", "arialbd.ttf", 8, TextColor, Right)

    # Add a text box on the left side. Display the value using white (0xffffff) 8pt Arial Bold font
    # on a black (0x000000) background with depressed rounded border.
    t = m.addText(11, labelYPos[chartIndex], m.formatValue(value, "2"), "arialbd.ttf", 8, 0xffffff,
        Left)
    t.setBackground(0x000000, 0x000000, -1)
    t.setRoundedCorners(3)

# Output the chart
print("Content-type: image/png\n")
binaryPrint(m.makeChart2(PNG))</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
