<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>Area Line Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (Python Edition)</p>
<p class="heading1">Area Line Chart</p>
<hr class="separator">
<div class="content">
<img src="images/arealine.png">
<br><br>
This example demonstrates an area chart with a line layer overlap on top. It also demonstrates using date/time x coordinates for the data points (as opposed to using x-axis labels), and also various methods to control the chart appearance.<br><br>
In ChartDirector, x coordinates for the data points are optional. If no x coordinates are provided for the data points, the x coordinates will be assumed to be the array indexes (0, 1, 2, 3 ...), and the data points would be evenly spaced in the x direction. Axis labels specified using <a href="Axis.setLabels.htm">Axis.setLabels</a> or <a href="Axis.setLabels2.htm">Axis.setLabels2</a> are also positioned using the array indexes as the x coordinates, so the labels will match with the data points.<br><br>
In some applications, it may be necessary or more convenient to provide x coordinates for the data points. For example, if the data points are unevenly spaced, or if there are multiple data series with different data point spacing in the x direction, x coordinates are needed. In this case, <a href="Layer.setXData.htm">Layer.setXData</a> or <a href="Layer.setXData2.htm">Layer.setXData2</a> can be used to provide the x coordinates. By default, ChartDirector will then automatically determine the x-axis scale and labels, just like how the y-axis is handled. The axis scale and labels can also be specified by using various <a href="Axis.htm">Axis</a> methods, such as <a href="Axis.setLinearScale.htm">Axis.setLinearScale</a>, <a href="Axis.setLogScale.htm">Axis.setLogScale</a> and <a href="Axis.setDateScale.htm">Axis.setDateScale</a> (please refer to <a href="Axis.htm">Axis</a> for the full list).<br><br>
<a href="Axis.setLabels.htm">Axis.setLabels</a> or <a href="Axis.setLabels2.htm">Axis.setLabels2</a> should not be used if x coordinates are provided, as they use array indexes as the x coordinates, which is unlikely to be consistent with the provided x coordinates.<br><br>
In this example, x coordinates are used to demonstrate the automatic x-axis scale and labels.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> pythondemo\arealine.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *

# In this example, we simply use random data for the 2 data series.
r = RanSeries(127)
data0 = r.getSeries(180, 70, -5, 5)
data1 = r.getSeries(180, 150, -15, 15)
timeStamps = r.getDateSeries(180, chartTime(2014, 3, 1), 86400)

# Create a XYChart object of size 640 x 420 pixels
c = XYChart(640, 420)

# Add a title box using grey (0x555555) 20pt Arial Bold font
c.addTitle("   Plasma Stabilizer Energy Usage", "arialbd.ttf", 20, 0x555555)

# Set the plotarea at (70, 70) and of size 540 x 320 pixels, with transparent background and border
# and light grey (0xcccccc) horizontal grid lines
c.setPlotArea(70, 70, 540, 320, -1, -1, Transparent, 0xcccccc)

# Add a legend box with horizontal layout above the plot area at (70, 32). Use 12pt Arial Bold dark
# grey (0x555555) font, transparent background and border, and line style legend icon.
b = c.addLegend(70, 32, 0, "arialbd.ttf", 12)
b.setFontColor(0x555555)
b.setBackground(Transparent, Transparent)
b.setLineStyleKey()

# Set axis label font to 12pt Arial
c.xAxis().setLabelStyle("arial.ttf", 12)
c.yAxis().setLabelStyle("arial.ttf", 12)

# Set the x and y axis stems to transparent, and the x-axis tick color to grey (0xaaaaaa)
c.xAxis().setColors(Transparent, TextColor, TextColor, 0xaaaaaa)
c.yAxis().setColors(Transparent)

# Set the major/minor tick lengths for the x-axis to 10 and 0.
c.xAxis().setTickLength(10, 0)

# For the automatic axis labels, set the minimum spacing to 80/40 pixels for the x/y axis.
c.xAxis().setTickDensity(80)
c.yAxis().setTickDensity(40)

# Use "mm/yyyy" as the x-axis label format for the first plotted month of a year, and "mm" for other
# months
c.xAxis().setMultiFormat(StartOfYearFilter(), "{value|mm/yyyy} ", StartOfMonthFilter(), "{value|mm}"
    )

# Add a title to the y axis using dark grey (0x555555) 12pt Arial Bold font
c.yAxis().setTitle("Energy (kWh)", "arialbd.ttf", 14, 0x555555)

# Add a line layer with 2-pixel line width
layer0 = c.addLineLayer(data0, 0xcc0000, "Power Usage")
layer0.setXData(timeStamps)
layer0.setLineWidth(2)

# Add an area layer using semi-transparent blue (0x7f0044cc) as the fill color
layer1 = c.addAreaLayer(data1, 0x7f0044cc, "Effective Load")
layer1.setXData(timeStamps)
layer1.setBorderColor(SameAsMainColor)

# Output the chart
c.makeChart("arealine.png")</pre></td></tr></table><br><b>[CGI Version]</b> pythondemo_cgi\arealine.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *

# In this example, we simply use random data for the 2 data series.
r = RanSeries(127)
data0 = r.getSeries(180, 70, -5, 5)
data1 = r.getSeries(180, 150, -15, 15)
timeStamps = r.getDateSeries(180, chartTime(2014, 3, 1), 86400)

# Create a XYChart object of size 640 x 420 pixels
c = XYChart(640, 420)

# Add a title box using grey (0x555555) 20pt Arial Bold font
c.addTitle("   Plasma Stabilizer Energy Usage", "arialbd.ttf", 20, 0x555555)

# Set the plotarea at (70, 70) and of size 540 x 320 pixels, with transparent background and border
# and light grey (0xcccccc) horizontal grid lines
c.setPlotArea(70, 70, 540, 320, -1, -1, Transparent, 0xcccccc)

# Add a legend box with horizontal layout above the plot area at (70, 32). Use 12pt Arial Bold dark
# grey (0x555555) font, transparent background and border, and line style legend icon.
b = c.addLegend(70, 32, 0, "arialbd.ttf", 12)
b.setFontColor(0x555555)
b.setBackground(Transparent, Transparent)
b.setLineStyleKey()

# Set axis label font to 12pt Arial
c.xAxis().setLabelStyle("arial.ttf", 12)
c.yAxis().setLabelStyle("arial.ttf", 12)

# Set the x and y axis stems to transparent, and the x-axis tick color to grey (0xaaaaaa)
c.xAxis().setColors(Transparent, TextColor, TextColor, 0xaaaaaa)
c.yAxis().setColors(Transparent)

# Set the major/minor tick lengths for the x-axis to 10 and 0.
c.xAxis().setTickLength(10, 0)

# For the automatic axis labels, set the minimum spacing to 80/40 pixels for the x/y axis.
c.xAxis().setTickDensity(80)
c.yAxis().setTickDensity(40)

# Use "mm/yyyy" as the x-axis label format for the first plotted month of a year, and "mm" for other
# months
c.xAxis().setMultiFormat(StartOfYearFilter(), "{value|mm/yyyy} ", StartOfMonthFilter(), "{value|mm}"
    )

# Add a title to the y axis using dark grey (0x555555) 12pt Arial Bold font
c.yAxis().setTitle("Energy (kWh)", "arialbd.ttf", 14, 0x555555)

# Add a line layer with 2-pixel line width
layer0 = c.addLineLayer(data0, 0xcc0000, "Power Usage")
layer0.setXData(timeStamps)
layer0.setLineWidth(2)

# Add an area layer using semi-transparent blue (0x7f0044cc) as the fill color
layer1 = c.addAreaLayer(data1, 0x7f0044cc, "Effective Load")
layer1.setXData(timeStamps)
layer1.setBorderColor(SameAsMainColor)

# Output the chart
print("Content-type: image/png\n")
binaryPrint(c.makeChart2(PNG))</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
