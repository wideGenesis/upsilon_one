<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>V-Bar Meter Orientation</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (Python Edition)</p>
<p class="heading1">V-Bar Meter Orientation</p>
<hr class="separator">
<div class="content">
<img src="images/vbarmeterorientation0.png">&nbsp;&nbsp;<img src="images/vbarmeterorientation1.png">&nbsp;&nbsp;<img src="images/vbarmeterorientation2.png">&nbsp;&nbsp;<img src="images/vbarmeterorientation3.png">
<br><br>
This example demonstration various orientations for vertical bar meters.<br><br>
In a vertical bar meter, the scale labels can be positioned on the left or right side of the meter scale. This is controlled by the last argument to <a href="LinearMeter.setMeter.htm">LinearMeter.setMeter</a>, which can be <a href="pychartdir.Left.htm">Left</a> or <a href="pychartdir.Right.htm">Right</a>. The color scale can also be position on the same or opposite side as the scale labels.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> pythondemo\vbarmeterorientation.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *

def createChart(chartIndex) :

    # The value to display on the meter
    value = 74.25

    # Bar colors of the meters
    barColor = [0x2299ff, 0x00ee00, 0xaa66ee, 0xff7711]

    # Create a LinearMeter object of size 70 x 240 pixels with very light grey (0xeeeeee) backgruond
    # and a grey (0xaaaaaa) 3-pixel thick rounded frame
    m = LinearMeter(70, 240, 0xeeeeee, 0xaaaaaa)
    m.setRoundedFrame(Transparent)
    m.setThickFrame(3)

    # This example demonstrates putting the text labels at the left or right side of the meter
    # scale, and putting the color scale on the same side as the labels or on opposite side.
    alignment = [Left, Left, Right, Right]
    meterXPos = [28, 38, 12, 21]
    labelGap = [2, 12, 10, 2]
    colorScalePos = [53, 28, 36, 10]

    # Configure the position of the meter scale and which side to put the text labels
    m.setMeter(meterXPos[chartIndex], 18, 20, 205, alignment[chartIndex])

    # Set meter scale from 0 - 100, with a tick every 10 units
    m.setScale(0, 100, 10)

    # To put the color scale on the same side as the text labels, we need to increase the gap
    # between the labels and the meter scale to make room for the color scale
    m.setLabelPos(0, labelGap[chartIndex])

    # Add a smooth color scale to the meter
    smoothColorScale = [0, 0x0000ff, 25, 0x0088ff, 50, 0x00ff00, 75, 0xdddd00, 100, 0xff0000]
    m.addColorScale(smoothColorScale, colorScalePos[chartIndex], 6)

    # Add a bar from 0 to value with glass effect and 4 pixel rounded corners
    m.addBar(0, value, barColor[chartIndex], glassEffect(NormalGlare, Left), 4)

    # Output the chart
    m.makeChart("vbarmeterorientation%s.png" % chartIndex)


createChart(0)
createChart(1)
createChart(2)
createChart(3)</pre></td></tr></table><br><b>[CGI Version]</b> pythondemo_cgi\vbarmeterorientation.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import cgi, sys

# Get HTTP query parameters
query = cgi.FieldStorage()

# This script can draw different charts depending on the chartIndex
chartIndex = int(query["img"].value)

# The value to display on the meter
value = 74.25

# Bar colors of the meters
barColor = [0x2299ff, 0x00ee00, 0xaa66ee, 0xff7711]

# Create a LinearMeter object of size 70 x 240 pixels with very light grey (0xeeeeee) backgruond and
# a grey (0xaaaaaa) 3-pixel thick rounded frame
m = LinearMeter(70, 240, 0xeeeeee, 0xaaaaaa)
m.setRoundedFrame(Transparent)
m.setThickFrame(3)

# This example demonstrates putting the text labels at the left or right side of the meter scale,
# and putting the color scale on the same side as the labels or on opposite side.
alignment = [Left, Left, Right, Right]
meterXPos = [28, 38, 12, 21]
labelGap = [2, 12, 10, 2]
colorScalePos = [53, 28, 36, 10]

# Configure the position of the meter scale and which side to put the text labels
m.setMeter(meterXPos[chartIndex], 18, 20, 205, alignment[chartIndex])

# Set meter scale from 0 - 100, with a tick every 10 units
m.setScale(0, 100, 10)

# To put the color scale on the same side as the text labels, we need to increase the gap between
# the labels and the meter scale to make room for the color scale
m.setLabelPos(0, labelGap[chartIndex])

# Add a smooth color scale to the meter
smoothColorScale = [0, 0x0000ff, 25, 0x0088ff, 50, 0x00ff00, 75, 0xdddd00, 100, 0xff0000]
m.addColorScale(smoothColorScale, colorScalePos[chartIndex], 6)

# Add a bar from 0 to value with glass effect and 4 pixel rounded corners
m.addBar(0, value, barColor[chartIndex], glassEffect(NormalGlare, Left), 4)

# Output the chart
print("Content-type: image/png\n")
binaryPrint(m.makeChart2(PNG))</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
