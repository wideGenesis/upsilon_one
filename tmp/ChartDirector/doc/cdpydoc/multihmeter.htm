<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>Multi-Pointer Horizontal Meter</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (Python Edition)</p>
<p class="heading1">Multi-Pointer Horizontal Meter</p>
<hr class="separator">
<div class="content">
<img src="images/multihmeter.png">
<br><br>
This example demonstrates a horizontal linear meter with multiple pointers.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Standalone Version]</b> pythondemo\multihmeter.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *

# The values to display on the meter
value0 = 30.99
value1 = 45.35
value2 = 77.64

# Create an LinearMeter object of size 250 x 75 pixels, using silver background with a 2 pixel black
# 3D depressed border.
m = LinearMeter(250, 75, silverColor(), 0, -2)

# Set the scale region top-left corner at (15, 25), with size of 220 x 20 pixels. The scale labels
# are located on the top (implies horizontal meter)
m.setMeter(15, 25, 220, 20, Top)

# Set meter scale from 0 - 100, with a tick every 10 units
m.setScale(0, 100, 10)

# Set 0 - 50 as green (99ff99) zone, 50 - 80 as yellow (ffff66) zone, and 80 - 100 as red (ffcccc)
# zone
m.addZone(0, 50, 0x99ff99)
m.addZone(50, 80, 0xffff66)
m.addZone(80, 100, 0xffcccc)

# Add deep red (000080), deep green (008000) and deep blue (800000) pointers to reflect the values
m.addPointer(value0, 0x000080)
m.addPointer(value1, 0x008000)
m.addPointer(value2, 0x800000)

# Add a label at bottom-left (10, 68) using Arial Bold/8pt/red (c00000)
m.addText(10, 68, "Temp C", "arialbd.ttf", 8, 0xc00000, BottomLeft)

# Add three text boxes to show the values in this meter
m.addText(148, 70, m.formatValue(value0, "2"), "arial.ttf", 8, 0x6666ff, BottomRight).setBackground(
    0, 0, -1)
m.addText(193, 70, m.formatValue(value1, "2"), "arial.ttf", 8, 0x33ff33, BottomRight).setBackground(
    0, 0, -1)
m.addText(238, 70, m.formatValue(value2, "2"), "arial.ttf", 8, 0xff3333, BottomRight).setBackground(
    0, 0, -1)

# Output the chart
m.makeChart("multihmeter.png")</pre></td></tr></table><br><b>[CGI Version]</b> pythondemo_cgi\multihmeter.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *

# The values to display on the meter
value0 = 30.99
value1 = 45.35
value2 = 77.64

# Create an LinearMeter object of size 250 x 75 pixels, using silver background with a 2 pixel black
# 3D depressed border.
m = LinearMeter(250, 75, silverColor(), 0, -2)

# Set the scale region top-left corner at (15, 25), with size of 220 x 20 pixels. The scale labels
# are located on the top (implies horizontal meter)
m.setMeter(15, 25, 220, 20, Top)

# Set meter scale from 0 - 100, with a tick every 10 units
m.setScale(0, 100, 10)

# Set 0 - 50 as green (99ff99) zone, 50 - 80 as yellow (ffff66) zone, and 80 - 100 as red (ffcccc)
# zone
m.addZone(0, 50, 0x99ff99)
m.addZone(50, 80, 0xffff66)
m.addZone(80, 100, 0xffcccc)

# Add deep red (000080), deep green (008000) and deep blue (800000) pointers to reflect the values
m.addPointer(value0, 0x000080)
m.addPointer(value1, 0x008000)
m.addPointer(value2, 0x800000)

# Add a label at bottom-left (10, 68) using Arial Bold/8pt/red (c00000)
m.addText(10, 68, "Temp C", "arialbd.ttf", 8, 0xc00000, BottomLeft)

# Add three text boxes to show the values in this meter
m.addText(148, 70, m.formatValue(value0, "2"), "arial.ttf", 8, 0x6666ff, BottomRight).setBackground(
    0, 0, -1)
m.addText(193, 70, m.formatValue(value1, "2"), "arial.ttf", 8, 0x33ff33, BottomRight).setBackground(
    0, 0, -1)
m.addText(238, 70, m.formatValue(value2, "2"), "arial.ttf", 8, 0xff3333, BottomRight).setBackground(
    0, 0, -1)

# Output the chart
print("Content-type: image/png\n")
binaryPrint(m.makeChart2(PNG))</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
