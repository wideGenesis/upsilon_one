<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>Zooming and Scrolling with Viewport Control</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">
<p class="heading0">ChartDirector 6.0 (Python Edition)</p>
<p class="heading1">Zooming and Scrolling with Viewport Control</p>
<hr class="separator">
<div class="content"><img src="images/viewportcontroldemo_web.png"><br><br>
The example extends the <a href="zoomscrolltrackweb.htm">Zooming and Scrolling with Track Line</a> example by adding a <a href="WebViewPortControl.htm">WebViewPortControl</a> to visualize and control the viewport, and a button to download the chart as PDF.<br><br>
Most of the code in this example is similar to that in the <a href="zoomscrolltrackweb.htm">Zooming and Scrolling with Track Line</a> example. The key changes are:<br><br>
<ul>
<li>On the server side, during initialization, the drawFullChart method is called to draw an overall chart that covers the full data range for display in the <a href="WebViewPortControl.htm">WebViewPortControl</a>.<br><br>
<li>On the browser side, during initialization, the <a href="JsViewPortControl.setViewer.htm">JsViewPortControl.setViewer</a> method is used to connect the JsViewPortControl to the JsChartViewer.<br><br>
<li>When the download button is clicked, a download attachment request will be sent to the browser using <a href="JsChartViewer.partialUpdateAsAttachment.htm">JsChartViewer.partialUpdateAsAttachment</a>. On the browser side, if the charting code uses <a href="WebChartViewer.isAttachmentRequest.htm">WebChartViewer.isAttachmentRequest</a> to determine if it is an attachment request. If it is an attachment request, the code will return the chart in PDF format.<br></ul>
</div><p class="heading1a">Files in this Demonstration</p><div class="content">
This sample script requires the following files. When developing your own script using this sample script as a template, please ensure you copy the necessary files to the proper directories  and reference them using proper paths.<br><br>
<table width="98%" border="1" cellpadding="5" cellspacing="0"> <tr><th width="24%">File<th width="74%">Description
<tr><td>viewportcontroldemo.py<td>Main source code for this demo.
<tr><td>scrollew.gif<br>zoomInIcon.gif<br>zoomOutIcon.gif<br>goto.gif<td>The images used in the push buttons in this demo.
<tr><td>getchart.py<td>The standard utility script used in the image url for retrieving the chart image from a temporary file (see <a href="BaseChart.makeTmpFile.htm">BaseChart.makeTmpFile</a>).
<tr><td>cdjcv.js<br>zoomin.cur<br>zoomout.cur<br>wait.gif<br>spacer.gif<td>The script file for <a href="JsChartViewer.htm">JsChartViewer</a> and <a href="JsViewPortControl.htm">JsViewPortControl</a>, and the supporting cursor and image files. They must be in the same directory.
<tr><td>loadresource.py<td>A utility script for loading non-CGI files from the CGI directory.<br><br>
For convenience of distribution, in this demonstration, all files, including Javascript, GIF and CUR files, are put in the same directory as the CGI script, and "loadresource.py" is used to load them. This is less efficient. In your own script, it is recommended that you put the Javascript, GIF and CUR files in a web document directory, so that "loadresource.py" is not needed.
</table></div><p class="heading1a">Source Code Listing</p><div class="content">
<b>[CGI Version]</b> pythondemo_cgi\viewportcontroldemo.py
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/python
from pychartdir import *
import cgi, sys

# Get HTTP query parameters
query = cgi.FieldStorage()


#
# In this demo, the generated web page needs to load the "cdjcv.js" Javascript file and several GIF
# files. For ease of installation, we put these files in the same directory as this script. However,
# if this script is installed in a CGI only directory (such as cgi-bin), the web server would not
# allow the browser to access these non-CGI files.
#
# To get around this potential issue, a special load resource script is used to load these files.
# Instead of using:
#
#    &lt;SCRIPT SRC="cdjcv.js"&gt;
#
# we now use:
#
#    &lt;SCRIPT SRC="loadresource.py?file=cdjcv.js"&gt;
#
# Similar methods are used to load the GIF files.
#
# If this script is not in a CGI only directory, you may replace the following loadResource string
# with an empty string "" to improve performance.
#
loadResource = "loadresource.py?file="

#
# Initialize the WebChartViewer when the page is first loaded
#
def initViewer(viewer) :
    # The full x-axis range is from Jan 1, 2007 to Jan 1, 2012
    startDate = chartTime(2010, 1, 1)
    endDate = chartTime(2015, 1, 1)
    viewer.setFullRange("x", startDate, endDate)

    # Initialize the view port to show the last 366 days (out of 1826 days)
    viewer.setViewPortWidth(366.0 / 1826)
    viewer.setViewPortLeft(1 - viewer.getViewPortWidth())

    # Set the maximum zoom to 10 days (out of 1826 days)
    viewer.setZoomInWidthLimit(10.0 / 1826)

#
# Create a random table for demo purpose.
#
def getRandomTable() :
    r = RanTable(127, 4, 1828)
    r.setDateCol(0, chartTime(2010, 1, 1), 86400)
    r.setCol(1, 150, -10, 10)
    r.setCol(2, 200, -10, 10)
    r.setCol(3, 250, -8, 8)
    return r

#
# Draw the chart
#
def drawChart(viewer) :
    # Determine the visible x-axis range
    viewPortStartDate = viewer.getValueAtViewPort("x", viewer.getViewPortLeft())
    viewPortEndDate = viewer.getValueAtViewPort("x", viewer.getViewPortLeft(
        ) + viewer.getViewPortWidth())

    # We need to get the data within the visible x-axis range. In real code, this can be by using a
    # database query or some other means as specific to the application. In this demo, we just
    # generate a random data table, and then select the data within the table.
    r = getRandomTable()

    # Select the data for the visible date range viewPortStartDate to viewPortEndDate. It is
    # possible there is no data point at exactly viewPortStartDate or viewPortEndDate. In this case,
    # we also need the data points that are just outside the visible date range to "overdraw" the
    # line a little bit (the "overdrawn" part will be clipped to the plot area) In this demo, we do
    # this by adding a one day margin to the date range when selecting the data.
    r.selectDate(0, viewPortStartDate - 86400, viewPortEndDate + 86400)

    # The selected data from the random data table
    timeStamps = r.getCol(0)
    dataSeriesA = r.getCol(1)
    dataSeriesB = r.getCol(2)
    dataSeriesC = r.getCol(3)

    #
    # Now we have obtained the data, we can plot the chart.
    #

    #================================================================================
    # Configure overall chart appearance.
    #================================================================================

    # Create an XYChart object of size 640 x 400 pixels
    c = XYChart(640, 400)

    # Set the plotarea at (55, 55) with width 80 pixels less than chart width, and height 90 pixels
    # less than chart height. Use a vertical gradient from light blue (f0f6ff) to sky blue (a0c0ff)
    # as background. Set border to transparent and grid lines to white (ffffff).
    c.setPlotArea(55, 55, c.getWidth() - 80, c.getHeight() - 90, c.linearGradientColor(0, 55, 0,
        c.getHeight() - 35, 0xf0f6ff, 0xa0c0ff), -1, Transparent, 0xffffff, 0xffffff)

    # As the data can lie outside the plotarea in a zoomed chart, we need to enable clipping.
    c.setClipping()

    # Add a title box using dark grey (0x333333) 18pt Arial Bold font
    c.addTitle("   Zooming and Scrolling with Viewport Control", "arialbd.ttf", 15, 0x333333)

    if viewer.isAttachmentRequest() :
        b = c.addLegend(55, 28, 0, "arialbd.ttf", 10)
        b.setBackground(Transparent, Transparent)
        b.setLineStyleKey()

    # Set the x and y axis stems to transparent and the label font to 10pt Arial
    c.xAxis().setColors(Transparent)
    c.yAxis().setColors(Transparent)
    c.xAxis().setLabelStyle("arial.ttf", 10)
    c.yAxis().setLabelStyle("arial.ttf", 10)

    # Add axis title using 10pt Arial Bold font
    c.yAxis().setTitle("Ionic Temperature (C)", "arialbd.ttf", 10)

    #================================================================================
    # Add data to chart
    #================================================================================

    #
    # In this example, we represent the data by lines. You may modify the code below to use other
    # layer types (areas, scatter plot, etc).
    #

    # Add a line layer for the lines, using a line width of 2 pixels
    layer = c.addLineLayer2()
    layer.setLineWidth(2)

    # In this demo, we do not have too many data points. In real code, the chart may contain a lot
    # of data points when fully zoomed out - much more than the number of horizontal pixels in this
    # plot area. So it is a good idea to use fast line mode.
    layer.setFastLineMode()

    # Now we add the 3 data series to a line layer, using the color red (0xff3333), green (0x008800)
    # and blue (0x3333cc)
    layer.setXData(timeStamps)
    layer.addDataSet(dataSeriesA, 0xff3333, "Alpha")
    layer.addDataSet(dataSeriesB, 0x008800, "Beta")
    layer.addDataSet(dataSeriesC, 0x3333cc, "Gamma")

    #================================================================================
    # Configure axis scale and labelling
    #================================================================================

    # Set the x-axis as a date/time axis with the scale according to the view port x range.
    viewer.syncDateAxisWithViewPort("x", c.xAxis())

    # For the automatic y-axis labels, set the minimum spacing to 30 pixels.
    c.yAxis().setTickDensity(30)

    #
    # In this demo, the time range can be from a few years to a few days. We demonstrate how to set
    # up different date/time format based on the time range.
    #

    # If all ticks are yearly aligned, then we use "yyyy" as the label format.
    c.xAxis().setFormatCondition("align", 360 * 86400)
    c.xAxis().setLabelFormat("{value|yyyy}")

    # If all ticks are monthly aligned, then we use "mmm yyyy" in bold font as the first label of a
    # year, and "mmm" for other labels.
    c.xAxis().setFormatCondition("align", 30 * 86400)
    c.xAxis().setMultiFormat(StartOfYearFilter(), "&lt;*font=bold*&gt;{value|mmm&lt;*br*&gt;yyyy}",
        AllPassFilter(), "{value|mmm}")

    # If all ticks are daily algined, then we use "mmm dd&lt;*br*&gt;yyyy" in bold font as the first label
    # of a year, and "mmm dd" in bold font as the first label of a month, and "dd" for other labels.
    c.xAxis().setFormatCondition("align", 86400)
    c.xAxis().setMultiFormat(StartOfYearFilter(),
        "&lt;*block,halign=left*&gt;&lt;*font=bold*&gt;{value|mmm dd&lt;*br*&gt;yyyy}", StartOfMonthFilter(),
        "&lt;*font=bold*&gt;{value|mmm dd}")
    c.xAxis().setMultiFormat2(AllPassFilter(), "{value|dd}")

    # For all other cases (sub-daily ticks), use "hh:nn&lt;*br*&gt;mmm dd" for the first label of a day,
    # and "hh:nn" for other labels.
    c.xAxis().setFormatCondition("else")
    c.xAxis().setMultiFormat(StartOfDayFilter(), "&lt;*font=bold*&gt;{value|hh:nn&lt;*br*&gt;mmm dd}",
        AllPassFilter(), "{value|hh:nn}")

    #================================================================================
    # Step 5 - Output the chart
    #================================================================================

    if viewer.isAttachmentRequest() :
        # Output as PDF attachment
        print("Content-Disposition: attachment; filename=\"viewportcontroldemo.pdf\"")
        print("Content-type: application/pdf\n")
        binaryPrint(c.makeChart2(PDF))
        sys.exit()
    else :
        # Output the chart
        chartQuery = c.makeTmpFile("/tmp/tmpcharts")

        # Set the chart URL to the viewer
        viewer.setImageUrl("getchart.py?img=/tmp/tmpcharts/" + chartQuery)

        # Output Javascript chart model to the browser to support tracking cursor
        viewer.setChartModel(c.getJsChartModel())

def drawFullChart(vp, viewer) :
    # We need to draw a small thumbnail chart for the full data range. The simplest method is to
    # simply get the full data to draw the chart. If the full data are very large (eg. millions of
    # points), for such a small thumbnail chart, it is often acceptable to just retreive a small
    # sample of the data.
    #
    # In this example, there are only around 5500 points for the 3 data series. This amount is not
    # large to ChartDirector, so we simply pass all the data to ChartDirector.
    r = getRandomTable()

    # Get all the data from the random table
    timeStamps = r.getCol(0)
    dataSeriesA = r.getCol(1)
    dataSeriesB = r.getCol(2)
    dataSeriesC = r.getCol(3)

    # Create an XYChart object of size 640 x 60 pixels
    c = XYChart(640, 60)

    # Set the plotarea with the same horizontal position as that in the main chart for alignment.
    # The vertical position is set to equal to the chart height.
    c.setPlotArea(55, 0, c.getWidth() - 80, c.getHeight() - 1, 0xc0d8ff, -1, 0x888888, Transparent,
        0xffffff)

    # Set the x axis stem to transparent and the label font to 10pt Arial
    c.xAxis().setColors(Transparent)
    c.xAxis().setLabelStyle("arial.ttf", 10)

    # Put the x-axis labels inside the plot area by setting a negative label gap. Use
    # setLabelAlignment to put the label at the right side of the tick.
    c.xAxis().setLabelGap(-1)
    c.xAxis().setLabelAlignment(1)

    # Set the y axis stem and labels to transparent (that is, hide the labels)
    c.yAxis().setColors(Transparent, Transparent)

    # Add a line layer for the lines with fast line mode enabled
    layer = c.addLineLayer2()
    layer.setFastLineMode()

    # Now we add the 3 data series to a line layer, using the color red (0xff3333), green (0x008800)
    # and blue (0x3333cc)
    layer.setXData(timeStamps)
    layer.addDataSet(dataSeriesA, 0xff3333)
    layer.addDataSet(dataSeriesB, 0x008800)
    layer.addDataSet(dataSeriesC, 0x3333cc)

    # The x axis scales should reflect the full range of the view port
    c.xAxis().setDateScale(viewer.getValueAtViewPort("x", 0), viewer.getValueAtViewPort("x", 1))

    # For the automatic x-axis labels, set the minimum spacing to 75 pixels.
    c.xAxis().setTickDensity(75)

    # For the auto-scaled y-axis, as we hide the labels, we can disable axis rounding. This can make
    # the axis scale fit the data tighter.
    c.yAxis().setRounding(0, 0)

    # Output the chart
    chartQuery = c.makeTmpFile("/tmp/tmpcharts")

    # Set the chart URL and chart metrics to the viewport control
    vp.setImageUrl("getchart.py?img=/tmp/tmpcharts/" + chartQuery)
    vp.setChartMetrics(c.getChartMetrics())

#
# This script handles both the full page request, as well as the subsequent partial updates (AJAX
# chart updates). We need to determine the type of request first before we processing it.
#

# Create the WebChartViewer object
viewer = WebChartViewer(query, "chart1")

if viewer.isPartialUpdateRequest() :
    # Is a partial update request. Draw the chart and perform a partial response.
    drawChart(viewer)
    binaryPrint(viewer.partialUpdateChart())
    sys.exit()

#
# If the code reaches here, it is a full page request.
#

# Initialize the WebChartViewer and draw the chart.
initViewer(viewer)
drawChart(viewer)

# Create the WebViewPortControl object
viewPortCtrl = WebViewPortControl("fullchart1")
drawFullChart(viewPortCtrl, viewer)

print("Content-type: text/html\n")
print("""
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Zooming and Scrolling with Viewport Control&lt;/title&gt;
    &lt;script type="text/javascript" src="%(loadResource)scdjcv.js"&gt;&lt;/script&gt;
    &lt;style type="text/css"&gt;
        .chartButton { font:12px Verdana; border-bottom:#000000 1px solid; padding:5px; cursor:pointer;}
        .chartButtonSpacer { font:12px Verdana; border-bottom:#000000 1px solid; padding:5px;}
        .chartButton:hover { box-shadow:inset 0px 0px 0px 2px #444488; }
        .chartButtonPressed { background-color: #CCFFCC; }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body style="margin:0px;"&gt;
&lt;script type="text/javascript"&gt;

//
// Execute the following initialization code after the web page is loaded
//
JsChartViewer.addEventListener(window, 'load', function() {
    // Update the chart when the view port has changed (eg. when the user zooms in using the mouse)
    var viewer = JsChartViewer.get('%(id)s');
    viewer.attachHandler("ViewPortChanged", viewer.partialUpdate);

    // Initialize the navigation pad
    JsViewPortControl.get('%(viewPortCtrl.getId())s').setViewer(viewer);

    // Draw track cursor when mouse is moving over plotarea or if the chart updates
    viewer.attachHandler(["MouseMovePlotArea", "TouchStartPlotArea", "TouchMovePlotArea", "PostUpdate",
        "Now", "ChartMove"], function(e) {
        this.preventDefault(e);   // Prevent the browser from using touch events for other actions
        trackLineLegend(viewer, viewer.getPlotAreaMouseX());
    });
});

//
// Draw track line with legend
//
function trackLineLegend(viewer, mouseX)
{
    // Remove all previously drawn tracking object
    viewer.hideObj("all");

    // The chart and its plot area
    var c = viewer.getChart();
    var plotArea = c.getPlotArea();

    // Get the data x-value that is nearest to the mouse, and find its pixel coordinate.
    var xValue = c.getNearestXValue(mouseX);
    var xCoor = c.getXCoor(xValue);
    if (xCoor == null)
        return;

    // Draw a vertical track line at the x-position
    viewer.drawVLine("trackLine", xCoor, plotArea.getTopY(), plotArea.getBottomY(), "black 1px dotted");

    // Array to hold the legend entries
    var legendEntries = [];

    // Iterate through all layers to build the legend array
    for (var i = 0; i &lt; c.getLayerCount(); ++i)
    {
        var layer = c.getLayerByZ(i);

        // The data array index of the x-value
        var xIndex = layer.getXIndexOf(xValue);

        // Iterate through all the data sets in the layer
        for (var j = 0; j &lt; layer.getDataSetCount(); ++j)
        {
            var dataSet = layer.getDataSetByZ(j);

            // We are only interested in visible data sets with names, as they are required for legend entries.
            var dataName = dataSet.getDataName();
            var color = dataSet.getDataColor();
            if ((!dataName) || (color == null))
                continue;

            // Build the legend entry, consist of a colored square box, the name and the data value.
            var dataValue = dataSet.getValue(xIndex);
            legendEntries.push("&lt;nobr&gt;" + viewer.htmlRect(10, 10, color) + " " + dataName + ": " +
                ((dataValue == null) ? "N/A" : dataValue.toPrecision(4)) + viewer.htmlRect(20, 0) + "&lt;/nobr&gt; ");

            // Draw a track dot for data points within the plot area
            var yCoor = c.getYCoor(dataSet.getPosition(xIndex), dataSet.getUseYAxis());
            if ((yCoor != null) &amp;&amp; (yCoor &gt;= plotArea.getTopY()) &amp;&amp; (yCoor &lt;= plotArea.getBottomY()))
            {
                viewer.showTextBox("dataPoint" + i + "_" + j, xCoor, yCoor, JsChartViewer.Center,
                    viewer.htmlRect(9, 9, color));
            }
        }
    }

    // Create the legend by joining the legend entries.
    var legend = "&lt;nobr&gt;[" + c.xAxis().getFormattedLabel(xValue, "mm/dd/yyyy") + "]" + viewer.htmlRect(20, 0) +
        "&lt;/nobr&gt; " + legendEntries.reverse().join("");

    // Display the legend on the top of the plot area
    viewer.showTextBox("legend", plotArea.getLeftX(), plotArea.getTopY(), JsChartViewer.BottomLeft, legend,
        "padding:0px 0px 3px 3px; font:bold 13px Arial; -webkit-text-size-adjust:100%%;");
}

//
// This method is called when the user clicks on the Pointer, Zoom In or Zoom Out buttons
//
function setMouseMode(mode)
{
    var viewer = JsChartViewer.get('%(id)s');
    if (mode == viewer.getMouseUsage())
        mode = JsChartViewer.Default;

    // Set the button color based on the selected mouse mode
    document.getElementById("scrollButton").className = "chartButton" +
        ((mode  == JsChartViewer.Scroll) ? " chartButtonPressed" : "");
    document.getElementById("zoomInButton").className = "chartButton" +
        ((mode  == JsChartViewer.ZoomIn) ? " chartButtonPressed" : "");
    document.getElementById("zoomOutButton").className = "chartButton" +
        ((mode  == JsChartViewer.ZoomOut) ? " chartButtonPressed" : "");

    // Set the mouse mode
    viewer.setMouseUsage(mode);
}

//
// This method is called when the user clicks on the buttons that selects the last NN days
//
function setTimeRange(duration)
{
    var viewer = JsChartViewer.get('%(id)s');

    // Set the view port width to represent the required duration (as a ratio to the total x-range)
    viewer.setViewPortWidth(Math.min(1,
        duration / (viewer.getValueAtViewPort("x", 1) - viewer.getValueAtViewPort("x", 0))));

    // Set the view port left so that the view port is moved to show the latest data
    viewer.setViewPortLeft(1 - viewer.getViewPortWidth());

    // Trigger a view port change event
    viewer.raiseViewPortChangedEvent();
}

&lt;/script&gt;
&lt;form method="post" id="ZoomScrollTrack" runat="server"&gt;
&lt;table cellspacing="0" cellpadding="0" style="border:black 1px solid;"&gt;
    &lt;tr&gt;
        &lt;td align="right" colspan="2" style="background:#000088; color:#ffff00; padding:0px 4px 2px 0px;"&gt;
            &lt;a style="color:#FFFF00; font:italic bold 10pt Arial; text-decoration:none" href="http://www.advsofteng.com/"&gt;
                Advanced Software Engineering
            &lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr valign="top"&gt;
        &lt;td style="width:130px; background:#c0c0ff;"&gt;
           &lt;div style="width:130px"&gt;
            &lt;!-- The following table is to create 3 cells for 3 buttons to control the mouse usage mode. --&gt;
            &lt;table cellspacing="0" cellpadding="0" width="100%%" border="0"&gt;
                &lt;tr&gt;
                    &lt;td class="chartButton" id="scrollButton" onclick="setMouseMode(JsChartViewer.Scroll)"
                        ontouchstart="this.onclick(event); event.preventDefault();"&gt;
                        &lt;img src="%(loadResource)sscrollew.gif" style="vertical-align:middle" alt="Drag" /&gt;&amp;nbsp;&amp;nbsp;Drag to Scroll
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td class="chartButton" id="zoomInButton" onclick="setMouseMode(JsChartViewer.ZoomIn)"
                        ontouchstart="this.onclick(event); event.preventDefault();"&gt;
                        &lt;img src="%(loadResource)szoomInIcon.gif" style="vertical-align:middle" alt="Zoom In" /&gt;&amp;nbsp;&amp;nbsp;Zoom In
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td class="chartButton" id="zoomOutButton" onclick="setMouseMode(JsChartViewer.ZoomOut)"
                        ontouchstart="this.onclick(event); event.preventDefault();"&gt;
                        &lt;img src="%(loadResource)szoomOutIcon.gif" style="vertical-align:middle" alt="Zoom Out" /&gt;&amp;nbsp;&amp;nbsp;Zoom Out
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td class="chartButtonSpacer"&gt;
                        &lt;div style="padding:2px"&gt;&amp;nbsp;&lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td class="chartButton" onclick="setTimeRange(30 * 86400);"
                        ontouchstart="this.onclick(event); event.preventDefault();"&gt;
                        &lt;img src="%(loadResource)sgoto.gif" style="vertical-align:middle" alt="Last 30 days" /&gt;&amp;nbsp;&amp;nbsp;Last 30 days
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td class="chartButton" onclick="setTimeRange(90 * 86400);"
                        ontouchstart="this.onclick(event); event.preventDefault();"&gt;
                        &lt;img src="%(loadResource)sgoto.gif" style="vertical-align:middle" alt="Last 90 days" /&gt;&amp;nbsp;&amp;nbsp;Last 90 days
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td class="chartButton" onclick="setTimeRange(366 * 86400);"
                        ontouchstart="this.onclick(event); event.preventDefault();"&gt;
                        &lt;img src="%(loadResource)sgoto.gif" style="vertical-align:middle" alt="Last Year" /&gt;&amp;nbsp;&amp;nbsp;Last Year
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td class="chartButton" onclick="setTimeRange(1E15);"
                        ontouchstart="this.onclick(event); event.preventDefault();"&gt;
                        &lt;img src="%(loadResource)sgoto.gif" style="vertical-align:middle" alt="All Time" /&gt;&amp;nbsp;&amp;nbsp;All Time
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;div style="text-align:center;"&gt;
                &lt;input type="button" value="Download PDF" style="font:13px Arial; width:124px;"
                    onclick="JsChartViewer.get('%(id)s').partialUpdateAsAttachment();" /&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;/td&gt;
        &lt;td style="border-left:black 1px solid; padding:10px 5px 10px 5px;"&gt;
            &lt;!-- ****** Here is the chart image ****** --&gt;
            %(chartImg)s&lt;br /&gt;
            &lt;!-- ****** Here is the viewport control ****** --&gt;
            %(viewPortCtrl.renderHTML())s
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
""" % {
    "loadResource" : loadResource,
    "id" : viewer.getId(),
    "viewPortCtrl.getId()" : viewPortCtrl.getId(),
    "chartImg" : viewer.renderHTML(),
    "viewPortCtrl.renderHTML()" : viewPortCtrl.renderHTML()
    })</pre></td></tr></table></div><br>
<hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div></body>
</HTML>
