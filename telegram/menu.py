import importlib
import sys
from time import sleep
import csv
from datetime import datetime
from telegram import sql_queries as sql
from telethon.tl.custom import Button
from telegram import buttons, buttons
from quotes.parsers import users_count
from project_shared import *
from telegram import shared
from telegram import instructions as ins
from messages.message import *
from telegram import callbacks

pics = f'{PROJECT_HOME_DIR}/html/'


async def start_menu(event, client, engine=None):
    referral = str(event.original_update.message.message).split(' ')
    user_profile = await sql.user_search(event.original_update.message.peer_id.user_id, engine)
    debug("User_profile:" + str(user_profile))
    if len(referral) > 1:
        user_profile = await sql.user_search(referral[1], engine)
        inc = user_profile[13] + 1
        await sql.db_save_referral(inc, referral[1], engine)
    sender_id = event.original_update.message.peer_id.user_id
    entity = await client.get_input_entity(sender_id)
    old_msg_id = await shared.get_old_msg_id(sender_id)
    if old_msg_id is not None:
        shared.pop_old_msg_id(sender_id)

    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ—à–µ–ª –ø—Ä–æ—Ñ–∞–ª–∏–Ω–≥ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è,
    # —Å—Ä–∞–∑—É —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Å –ø—Ä–æ—Ñ–∞–π–ª–∞
    if not is_user_profile_done(sender_id):
        # –∞ –≤–æ–æ–±—â–µ –¥–æ—à–µ–ª –ª–∏ —é–∑–µ—Ä –¥–æ –ø—Ä–æ—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –¥–æ—Ö–æ–¥–∏–ª, —Ç–æ –Ω–µ –Ω–∞–¥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–∑—É
        if not user_profiler_map_lookup(sender_id):
            reset_user_profiler_data(sender_id)
            await client.send_message(entity, ins.hello_1, file=f'{PROJECT_HOME_DIR}/html/hello_1.jpg',
                                      buttons=buttons.keyboard_forw2)
        else:
            #  –ï—Å–ª–∏ –Ω–µ –¥–æ—à–µ–ª –¥–æ –ø—Ä–æ—Ñ–∞–π–ª–∞ –¥–∞–∂–µ, —Ç–æ –ø—Ä–µ–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–¥–æ
            await client.send_message(event.input_sender, 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
            await callbacks.send_next_profiler_question(client, sender_id, 0)
    else:
        # –ï—Å–ª–∏ —é–∑–µ—Ä —É–∂–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥, —Ç–æ –µ–º—É –Ω–µ –Ω–∞–¥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–∑—É –∏ –æ–ø—Ä–æ—Å - —Å—Ä–∞–∑—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await tools_menu(event, client)
    # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–µ —á–∏—Å–ª–∏–ª—Å—è)
    await sql.append_new_user(sender_id)


async def meta_menu(event, client):
    sender_id = event.original_update.message.sender_id
    old_msg_id = await shared.get_old_msg_id(sender_id)
    if old_msg_id is not None:
        shared.pop_old_msg_id(sender_id)
    await client.send_message(event.input_sender, '.', buttons=buttons.keyboard_start)


async def tools_menu(event, client):
    sender_id = event.original_update.message.sender_id
    await client.delete_messages(sender_id, event.message.id)

    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ—à–µ–ª –ø—Ä–æ—Ñ–∞–ª–∏–Ω–≥ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    if not is_user_profile_done(sender_id):
        reset_user_profiler_data(sender_id)

    old_msg_id = await shared.get_old_msg_id(sender_id)
    if old_msg_id is not None:
        is_poll = await shared.is_old_msg_poll(sender_id)
        if is_poll:
            await shared.delete_old_message(client, sender_id)
            menu_msg = await client.send_message(event.input_sender, 'üìÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', buttons=buttons.keyboard_0)
            await shared.save_old_message(sender_id, menu_msg)
            shared.set_old_msg_poll(sender_id, False)
        else:
            menu_msg = await client.edit_message(event.input_sender, old_msg_id, 'üìÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                 buttons=buttons.keyboard_0)
    else:
        menu_msg = await client.send_message(event.input_sender, 'üìÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', buttons=buttons.keyboard_0)
        await shared.save_old_message(sender_id, menu_msg)


async def profile_menu(event, client, engine=None):
    keyboard_profile = [
        [Button.inline('üíé	  ' + '–ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã', b'requests_store')],
        [Button.inline('\U0001F91D	  ' + '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', b'invite_friends')],
        [Button.inline('\U0000267B	  ' + '–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞', b'risk_reset')],
        [Button.inline('\U0001F519    ' + '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', b'main')]
    ]

    sender_id = event.input_sender
    m_id = getattr(event, "message", None)
    if m_id is not None:
        await client.delete_messages(sender_id.user_id, event.message.id)

    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ—à–µ–ª –ø—Ä–æ—Ñ–∞–ª–∏–Ω–≥ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    if not is_user_profile_done(sender_id.user_id):
        reset_user_profiler_data(sender_id.user_id)

    await client.get_input_entity(sender_id)
    user_profile = await sql.user_search(sender_id.user_id, engine)
    count = int
    filename = f'{PROJECT_HOME_DIR}/{RESULTS_PATH}users.csv'
    with open(filename, newline='') as f:
        data = csv.reader(f, delimiter=',')
        for row in data:
            count = str(row).strip("['']")
    profile_score_str = ""
    final_profile_score = get_final_score(sender_id.user_id)
    if isinstance(final_profile_score, int):
        if final_profile_score <= -9:
            profile_score_str = "–ü–æ–ª–Ω–æ–µ –æ—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞"
        elif -9 < final_profile_score <= -4:
            profile_score_str = "–°–∏–ª—å–Ω–æ–µ –æ—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞"
        elif -4 < final_profile_score <= 1:
            profile_score_str = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–∏—Å–∫–∞"
        elif 1 < final_profile_score < 6:
            profile_score_str = "–†–∞–∑—É–º–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–∏—Å–∫–∞"
        elif 6 <= final_profile_score < 10:
            profile_score_str = "–£–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–∏—Å–∫–∞"
        elif final_profile_score >= 10:
            profile_score_str = "–ü–æ–ª–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–∏—Å–∫–∞"
    else:
        profile_score_str = final_profile_score

    paid_amount, _ = await sql.get_request_amount(sender_id.user_id)

    old_msg_id = await shared.get_old_msg_id(sender_id.user_id)
    if old_msg_id is not None:
        is_poll = await shared.is_old_msg_poll(sender_id.user_id)
        if is_poll:
            await shared.delete_old_message(client, sender_id.user_id)
            menu_msg = await client.send_message(event.input_sender,
                                                 f'\U0001F464 : {user_profile[3]}\n'
                                                 f'–ò–º—è: {user_profile[5]}\n\n'
                                                 f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∏—Å–∫ –ø—Ä–æ—Ñ–∞–π–ª–∞: __{profile_score_str}__\n'
                                                 f'–ë–∞–ª–∞–Ω—Å: __{paid_amount} –∑–∞–ø—Ä–æ—Å–æ–≤__\n'
                                                 f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: __{count}__', buttons=keyboard_profile)
            await shared.save_old_message(sender_id.user_id, menu_msg)
            shared.set_old_msg_poll(sender_id.user_id, False)
        else:
            await client.edit_message(event.input_sender, old_msg_id,
                                      f'\U0001F464 : {user_profile[3]}\n'
                                      f'–ò–º—è: {user_profile[5]}\n\n'
                                      f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∏—Å–∫ –ø—Ä–æ—Ñ–∞–π–ª–∞: __{profile_score_str}__\n'
                                      f'–ë–∞–ª–∞–Ω—Å: __{paid_amount} –∑–∞–ø—Ä–æ—Å–æ–≤__\n'
                                      f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: __{count}__', buttons=keyboard_profile)
    else:
        menu_msg = await client.send_message(event.input_sender,
                                             f'\U0001F464 : {user_profile[3]}\n'
                                             f'–ò–º—è: {user_profile[5]}\n\n'
                                             f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∏—Å–∫ –ø—Ä–æ—Ñ–∞–π–ª–∞: __{profile_score_str}__\n'
                                             f'–ë–∞–ª–∞–Ω—Å: __{paid_amount} –∑–∞–ø—Ä–æ—Å–æ–≤__\n'
                                             f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: __{count}__', buttons=keyboard_profile)
        await shared.save_old_message(sender_id.user_id, menu_msg)


async def donate_menu(event, client):
    await client.send_message(event.input_sender, '# TODO')


async def information_menu(event, client, engine=engine):
    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ—à–µ–ª –ø—Ä–æ—Ñ–∞–ª–∏–Ω–≥ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    sender_id = event.input_sender.user_id
    await client.delete_messages(sender_id, event.message.id)
    if not is_user_profile_done(sender_id):
        reset_user_profiler_data(sender_id)

    old_msg_id = await shared.get_old_msg_id(sender_id)
    # await event.edit()
    if old_msg_id is not None:
        is_poll = await shared.is_old_msg_poll(sender_id)
        if is_poll:
            await shared.delete_old_message(client, sender_id)
            menu_msg = await client.send_message(event.input_sender, 'üõé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', buttons=buttons.keyboard_info)
            await shared.save_old_message(sender_id, menu_msg)
            shared.set_old_msg_poll(sender_id, False)
        else:
            await client.edit_message(event.input_sender, old_msg_id, 'üõé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', buttons=buttons.keyboard_info)
    else:
        menu_msg = await client.send_message(event.input_sender, 'üõé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', buttons=buttons.keyboard_info)
        await shared.save_old_message(sender_id, menu_msg)

